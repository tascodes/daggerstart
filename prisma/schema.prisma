// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String           @id @default(cuid())
    name           String?
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    characters     Character[]
    gameMaster     Game[]
    diceRolls      DiceRoll[]
    gameMasterFear GameMasterFear[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Character {
    id          String  @id @default(cuid())
    name        String
    pronouns    String?
    class       String
    subclass    String
    ancestry    String
    community   String
    level       Int
    experience1 String?
    experience2 String?

    // Ability modifiers (default to 0)
    agilityModifier   Int @default(0)
    strengthModifier  Int @default(0)
    finesseModifier   Int @default(0)
    instinctModifier  Int @default(0)
    presenceModifier  Int @default(0)
    knowledgeModifier Int @default(0)

    // Marked traits (default to false)
    agilityMarked     Boolean @default(false)
    strengthMarked    Boolean @default(false)
    finesseMarked     Boolean @default(false)
    instinctMarked    Boolean @default(false)
    presenceMarked    Boolean @default(false)
    knowledgeMarked   Boolean @default(false)

    // Health and damage tracking
    hp                    Int     @default(0)
    maxHp                 Int     @default(0)
    stress                Int     @default(0)
    hope                  Int     @default(0)
    majorDamageThreshold  String?
    severeDamageThreshold String?

    // Defense stats
    evasion Int @default(0)
    armor   Int @default(0)

    // Gold/wealth tracking
    goldHandfuls Int     @default(0)
    goldBags     Int     @default(0)
    goldChest    Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    game   Game?   @relation(fields: [gameId], references: [id], onDelete: SetNull)
    gameId String?

    diceRolls      DiceRoll[]
    CharacterLevel CharacterLevel[]

    @@index([userId])
    @@index([gameId])
}

model Game {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    gameMaster   User   @relation(fields: [gameMasterId], references: [id], onDelete: Cascade)
    gameMasterId String

    characters     Character[]
    diceRolls      DiceRoll[]
    gameMasterFear GameMasterFear[]

    @@index([gameMasterId])
}

model DiceRoll {
    id        String   @id @default(cuid())
    name      String // What type of roll (e.g., "Attack", "Damage", "Stealth")
    rollType  String // "Action" or "Damage"
    createdAt DateTime @default(now())

    // Basic roll data
    diceExpression    String // e.g., "2d12", "1d8", etc.
    individualResults Json // Array of individual die results
    total             Int // Sum of all dice
    modifier          Int? // Ability modifier or other bonus applied
    finalTotal        Int? // Total + modifier (for display purposes)

    // Action roll specific data
    hopeResult Int? // Result of Hope die (for Action rolls)
    fearResult Int? // Result of Fear die (for Action rolls)

    // Relations
    game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    character   Character? @relation(fields: [characterId], references: [id], onDelete: SetNull)
    characterId String?

    @@index([gameId])
    @@index([userId])
    @@index([createdAt])
}

model GameMasterFear {
    id        String   @id @default(cuid())
    fearCount Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations - unique per user per game
    game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([gameId, userId])
    @@index([gameId])
    @@index([userId])
}

enum LevelChoice {
    TRAIT_BONUS
    HIT_POINT_SLOT
    STRESS_SLOT
    EXPERIENCE_BONUS
    DOMAIN_CARD
    EVASION_BONUS
    SUBCLASS_CARD
    PROFICIENCY
    MULTICLASS
}

model CharacterLevel {
    id                  String                             @id @default(cuid())
    level               Int                                @default(1)
    choices             CharacterLevelChoice[]
    // traits increased at this level
    traitIncreases      CharacterLevelTraitIncrease[]
    // experiences increased at this level
    experienceIncreases CharacterLevelExperienceIncrease[]
    // class chosen for multiclassing at this level
    multiclass          String?
    createdAt           DateTime                           @default(now())
    updatedAt           DateTime                           @updatedAt

    character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
    characterId String

    @@unique([characterId, level])
    @@index([characterId])
    @@index([level])
    @@index([characterId, level])
}

model CharacterLevelChoice {
    id               String         @id @default(cuid())
    characterLevel   CharacterLevel @relation(fields: [characterLevelId], references: [id], onDelete: Cascade)
    characterLevelId String
    choice           LevelChoice

    @@index([characterLevelId])
}

enum Trait {
    AGILITY
    STRENGTH
    FINESSE
    INSTINCT
    PRESENCE
    KNOWLEDGE
}

model CharacterLevelTraitIncrease {
    id               String         @id @default(cuid())
    characterLevel   CharacterLevel @relation(fields: [characterLevelId], references: [id], onDelete: Cascade)
    characterLevelId String
    trait            Trait

    @@index([characterLevelId])
    @@index([trait])
}

model CharacterLevelExperienceIncrease {
    id               String         @id @default(cuid())
    characterLevel   CharacterLevel @relation(fields: [characterLevelId], references: [id], onDelete: Cascade)
    characterLevelId String
    experience       String

    @@index([characterLevelId])
}
